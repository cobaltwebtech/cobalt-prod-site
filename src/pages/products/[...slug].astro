---
export const prerender = true;

// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import PrimaryCTA from "@/components/ui/buttons/PrimaryCTA.astro";
import Breadcrumb from "@/components/ui/buttons/Breadcrumb.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@/data_files/constants";

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
};
// This gets the static paths for all the unique products
export async function getStaticPaths() {
  const productEntries = await getCollection("products");
  return productEntries.map((product) => ({
    params: { slug: product.slug },
    props: { product },
  }));
};

const { product } = Astro.props;

const pageTitle: string = `${product.data.title} | ${SITE.title}`;
---

<MainLayout title={pageTitle} >
  <div id="overlay" class="fixed inset-0 bg-slate-100 dark:bg-cobalt-950">
  </div>

  <section
    class="mx-auto flex max-w-[85rem] flex-col px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <div
      class="flex flex-col gap-16 items-center justify-between space-y-4 sm:flex-row sm:space-y-0"
    >
      <div id="fadeInUp" class="w-[600px] max-w-full">
        <h1
          class="block text-3xl font-bold text-slate-800 dark:text-slate-200 sm:text-5xl md:text-6xl lg:text-7xl"
        >
          {product.data.title}
        </h1>
        <p class="my-4 text-xl font-bold text-cyan-700 dark:text-cyan-400">
          {product.data.subHeading}
        </p>
        <p id="fadeText"
        class="mb-8 max-w-prose text-pretty font-light text-slate-700 dark:text-slate-300 sm:text-xl"
        >
          {product.data.main.description1}
        </p>
        <p id="fadeText"
        class="mb-8 max-w-prose text-pretty font-light text-slate-700 dark:text-slate-300 sm:text-xl"
        >
          {product.data.main.description2}
        </p>
      </div>
      <div>
        <Image
          id="fadeInMoveRight"
          src={product.data.main.imgMain}
          class="w-[600px] rounded-xl"
          alt={product.data.main.imgAlt}
          format={"avif"}
          loading={"eager"}
          width="600"
        />
      </div>
    </div>
  </section>

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <nav
      class="mx-auto grid max-w-5xl gap-y-4 sm:flex sm:gap-x-4 sm:gap-y-0"
      aria-label="Tabs"
      role="tablist"
    >
      <!-- First tab button element -->
      <button
        type="button"
        class="flex w-full justify-center md:p-5 rounded-xl p-3 outline-none transition duration-300 border-2 border-cyan-400 dark:border-cyan-500 bg-cobalt-50/80 dark:bg-cobalt-800"
        id="tabs-with-card-item-1"
        data-target="#tabs-with-card-1"
        role="tab"
        autofocus
      >
        <!-- Tab text -->
        <span
          class="text-slate-800 dark:text-slate-200 font-semibold"  >
          {product.data.tabs.title1}
        </span>
      </button>

      <!-- Second tab button element -->
      <button
        type="button"
        class="flex w-full justify-center md:p-5 rounded-xl p-3 outline-none transition duration-300 border-2 border-cyan-200 dark:border-cyan-700 bg-cobalt-50/40 dark:bg-cobalt-900"
        id="tabs-with-card-item-2"
        data-target="#tabs-with-card-2"
        role="tab"
      >
        <!-- Tab text -->
        <span
          class="text-slate-800 dark:text-slate-200 font-semibold"  >
          {product.data.tabs.title2}
        </span>
      </button>
    </nav>

    <div class="w-full my-4 mx-auto text-center text-sm text-slate-600 dark:text-slate-400">
      Click each tab above to view more info
    </div>

      <div class="mt-12 md:mt-16">
        <div id="tabs-with-card-1" role="tabpanel">
          <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
            <div class="grid gap-12 md:grid-cols-2">
              <div class="lg:w-3/4">
                <h2
                  class="text-balance text-3xl font-bold text-slate-800 dark:text-slate-200 md:leading-tight lg:text-4xl"
                >
                  {product.data.tabFirst.title}
                </h2>
                <p
                  class="mt-3 text-pretty text-slate-600 dark:text-slate-400"
                >
                  {product.data.tabFirst.subTitle}
                </p>
                <p class="mt-5 font-bold text-xl text-cyan-600 dark:text-cyan-400">
                  {product.data.tabFirst.ctaDescription}
                </p>
                <p class="mt-5">
                  <PrimaryCTA
                    title={product.data.tabFirst.btnTitle}
                    url={product.data.tabFirst.btnURL}
                    iconName={product.data.tabFirst.btnIconName}
                  />
                </p>
              </div>

              <div class="space-y-6 lg:space-y-10">
                {
                  product.data.tabFirstItems.map((list) => (
                    <div class="flex">
                      <div>
                        <h3 class="text-base font-bold text-slate-800 dark:text-slate-200 sm:text-lg">
                          {list.title}
                        </h3>
                        <p class="mt-1 text-slate-600 dark:text-slate-400">
                          {list.subTitle}
                        </p>
                      </div>
                    </div>
                  ))
                }
              </div>
            </div>
          </div>
        </div>

        <div id="tabs-with-card-2" class="hidden" role="tabpanel">
          <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
            <div class="grid gap-12 md:grid-cols-2">
              <div class="lg:w-3/4">
                <h3
                  class="text-balance text-3xl font-bold text-slate-800 dark:text-slate-200 md:leading-tight lg:text-4xl"
                >
                  {product.data.tabSecond.title}
                </h3>
                <p
                  class="mt-3 text-pretty text-slate-600 dark:text-slate-400"
                >
                  {product.data.tabSecond.subTitle}
                </p>
                <p class="mt-5 font-bold text-xl text-cyan-600 dark:text-cyan-400">
                  {product.data.tabSecond.ctaDescription}
                </p>
                <p class="mt-5">
                  <PrimaryCTA
                    title={product.data.tabSecond.btnTitle}
                    url={product.data.tabSecond.btnURL}
                    iconName={product.data.tabSecond.btnIconName}
                  />
                </p>
              </div>
              <div class="space-y-6 lg:space-y-10">
                {
                  product.data.tabSecondItems.map((list) => (
                    <div class="flex">
                      <div>
                        <h3 class="text-base font-bold text-slate-800 dark:text-slate-200 sm:text-lg">
                          {list.title}
                        </h3>
                        <p class="mt-1 text-slate-600 dark:text-slate-400">
                          {list.subTitle}
                        </p>
                      </div>
                    </div>
                  ))
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    <div class="my-8">
      <Breadcrumb
        title="Back to Products"
        url="/products/"
        iconName="arrowLeftCircle"
      />
    </div>
  </div>
</MainLayout>

<script>
  import { gsap } from "gsap";

  type AnimationSettings = {
    autoAlpha?: number;
    y?: number;
    x?: number;
    willChange?: string;
  };

  function setElementAnimationDefaults(
    id: string,
    settings: AnimationSettings
  ) {
    gsap.set(id, settings);
  }

  setElementAnimationDefaults(
    "#fadeText", {
      autoAlpha: 0,
      y: 50,
      willChange: "transform, opacity",
    });

  setElementAnimationDefaults(
    "#fadeInUp", {
      autoAlpha: 0,
      y: 50,
      willChange: "transform, opacity",
    });

  setElementAnimationDefaults(
    "#fadeInMoveRight", {
      autoAlpha: 0,
      x: 300,
      willChange: "transform, opacity",
    });

  let timeline = gsap.timeline(
    { 
      defaults: { overwrite: "auto" } 
    }
  );

  timeline.to(
    "#fadeText", {
      duration: 0.25,
      autoAlpha: 1,
      y: 0,
      delay: 0.25,
      ease: "power2.out",
    }
  );

  timeline.to(
    "#fadeInUp", { 
      duration: 1, 
      autoAlpha: 1, 
      y: 0, 
      ease: "power2.out" 
    },
    "-=0.5"
  );

  timeline.to(
    "#fadeInMoveRight", { 
      duration: 1, 
      autoAlpha: 1, 
      x: 0, 
      ease: "power2.inOut" 
    },
    "-=0.75"
  );

  timeline.to(
    "#overlay", {
      duration: 1, 
      autoAlpha: 0, 
      delay: 0.2 
    }
  );
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn: any, activeButton: any) {
      if (btn !== activeButton) {
        btn.classList.remove(
          "border-cyan-400",
          "bg-cobalt-50/80",
          "dark:border-cyan-500",
          "dark:bg-cobalt-800",
        );
        btn.classList.add(
          "border-cyan-200",
          "bg-cobalt-50/40",
          "dark:border-cyan-700",
          "dark:bg-cobalt-900",
        );

        const tabId = btn.getAttribute("data-target");
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) {
            contentElement.classList.add("hidden");
          }
        }
      }
    }

    function activateButton(button: any) {
      button.classList.add(
        "border-cyan-400",
        "bg-cobalt-50/80",
        "dark:border-cyan-500",
        "dark:bg-cobalt-800",
      );
      button.classList.remove(
        "border-cyan-200",
        "bg-cobalt-50/40",
        "dark:border-cyan-700",
        "dark:bg-cobalt-900",
      );

      const tabId = button.getAttribute("data-target");
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) {
          contentElementToShow.classList.remove("hidden");
        }
      }
    }

    const tabButtons = document.querySelectorAll("[data-target]");

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>
