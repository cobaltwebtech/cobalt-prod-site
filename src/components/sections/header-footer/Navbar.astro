---
import NavLink from "@/components/ui/links/NavLink.astro";
import menuLinks from "@/lib/navigation";
import Logo from "@/components/Logo.astro";
import MobileMenuBtn from "@/components/ui/buttons/MobileMenuBtn.astro";
import ThemeSwitchBtn from "@/components/ui/buttons/ThemeSwitchBtn.astro";
---

<!-- Main header component -->
<header
  class="sticky inset-x-0 top-4 z-50 flex w-full flex-wrap text-sm md:flex-nowrap md:justify-start"
>
  <!-- Navigation container -->
  <nav
    class="bg-cobalt-800/90 dark:bg-cobalt-800/85 relative mx-2 w-full rounded-3xl border border-yellow-100/40 p-2 backdrop-blur-md sm:rounded-[36px] sm:px-4 sm:py-3 md:flex md:items-center md:justify-between md:px-4 md:py-0 lg:px-8 xl:mx-auto dark:border-slate-700/40 dark:backdrop-blur-md"
    aria-label="Navigation"
  >
    <div class="flex items-center justify-between">
      <!-- Brand logo -->
      <a
        class="flex rounded-lg text-xl font-bold ring-slate-500 outline-none focus-visible:ring dark:ring-slate-200 dark:focus:outline-none"
        href="/"
        aria-label="Cobalt Web Technologies Logo"
      >
        <div class="m-2 h-auto w-16 sm:w-24">
          <Logo />
        </div>
        <div
          class="mx-2 flex items-center font-bold text-slate-200 sm:w-28 sm:text-lg xl:w-max xl:text-3xl"
        >
          Cobalt Web Technologies
        </div>
      </a>
      <!-- Menu toggle for smaller screens -->
      <div class="ml-auto md:hidden">
        <MobileMenuBtn />
      </div>
      <!-- ThemeIcon component specifically for smaller screens -->
      <div class="inline-block md:hidden">
        <ThemeSwitchBtn />
      </div>
    </div>
    <!-- Contains navigation links -->
    <div
      id="navbar-collapse-with-animation"
      class="hs-collapse hidden grow basis-full overflow-hidden transition-all duration-300 md:block"
    >
      <!-- Navigation links container -->
      <div
        class="m-5 flex flex-col gap-x-0 gap-y-4 sm:mr-0 md:flex-row md:items-center md:justify-end md:gap-x-4 md:gap-y-0 md:ps-5 lg:gap-x-7"
      >
        <!-- Navigation links and Authentication component -->
        {
          menuLinks.navBarLinks.map((link) => (
            <NavLink url={link.url} name={link.name} />
          ))
        }

        <!-- ThemeIcon component specifically for larger screens -->
        <div class="hidden md:inline-block">
          <ThemeSwitchBtn />
        </div>
      </div>
    </div>
  </nav>
</header>
<!-- Theme Appearance script to manage light/dark modes -->
<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const HSThemeAppearance = {
      init() {
        const defaultTheme = "default";
        let theme = localStorage.getItem("hs_theme") || defaultTheme;

        if (document.querySelector("html").classList.contains("dark")) return;
        this.setAppearance(theme);
      },
      _resetStylesOnLoad() {
        const $resetStyles = document.createElement("style");
        $resetStyles.innerText = `*{transition: unset !important;}`;
        $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
        document.head.appendChild($resetStyles);
        return $resetStyles;
      },
      setAppearance(theme, saveInStore = true, dispatchEvent = true) {
        const $resetStylesEl = this._resetStylesOnLoad();

        if (saveInStore) {
          localStorage.setItem("hs_theme", theme);
        }

        if (theme === "auto") {
          theme = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "default";
        }

        document.querySelector("html").classList.remove("dark");
        document.querySelector("html").classList.remove("default");
        document.querySelector("html").classList.remove("auto");

        document
          .querySelector("html")
          .classList.add(this.getOriginalAppearance());

        setTimeout(() => {
          $resetStylesEl.remove();
        });

        if (dispatchEvent) {
          window.dispatchEvent(
            new CustomEvent("on-hs-appearance-change", { detail: theme }),
          );
        }
      },
      getAppearance() {
        let theme = this.getOriginalAppearance();
        if (theme === "auto") {
          theme = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "default";
        }
        return theme;
      },
      getOriginalAppearance() {
        const defaultTheme = "default";
        return localStorage.getItem("hs_theme") || defaultTheme;
      },
    };
    HSThemeAppearance.init();

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", () => {
        if (HSThemeAppearance.getOriginalAppearance() === "auto") {
          HSThemeAppearance.setAppearance("auto", false);
        }
      });

    const $clickableThemes = document.querySelectorAll(
      "[data-hs-theme-click-value]",
    );
    const $switchableThemes = document.querySelectorAll(
      "[data-hs-theme-switch]",
    );

    $clickableThemes.forEach(($item) => {
      $item.addEventListener("click", () =>
        HSThemeAppearance.setAppearance(
          $item.getAttribute("data-hs-theme-click-value"),
          true,
          $item,
        ),
      );
    });

    $switchableThemes.forEach(($item) => {
      $item.addEventListener("change", (e) => {
        HSThemeAppearance.setAppearance(e.target.checked ? "dark" : "default");
      });

      $item.checked = HSThemeAppearance.getAppearance() === "dark";
    });

    window.addEventListener("on-hs-appearance-change", (e) => {
      $switchableThemes.forEach(($item) => {
        $item.checked = e.detail === "dark";
      });
    });
  });
</script>
<!-- Preline imports are handled at MainLayout.astro with support for View Transitions -->
