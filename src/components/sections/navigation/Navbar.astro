---

import { Icon } from "astro-icon/components";
import { Button } from "@/components/starwind/button";
import Logo from "@/components/ui/Logo.astro";
import menuItems from "@/lib/navigation";

// Destructure the properties from Astro.props and get the current URL from Astro.url.pathname
const currentPath = Astro.url.pathname;
---

<!-- Main header component -->
<header
  class="sticky inset-x-0 top-4 z-50 mx-auto w-full max-w-screen-2xl px-4 text-sm sm:px-6"
>
  <!-- Navigation container -->
  <nav
    class="bg-cobalt-800/90 dark:bg-cobalt-800/85 relative mx-auto grid w-full grid-cols-6 items-center rounded-3xl px-4 backdrop-blur-md md:px-6 lg:grid-cols-16 lg:px-6 xl:px-8"
    aria-label="Navigation"
  >
    <!-- Brand logo -->
    <div class="col-span-4 sm:py-2 lg:col-span-8">
      <a
        href="/"
        aria-label="Cobalt Web Technologies Logo"
        class="flex items-center gap-2"
      >
        <Logo class="size-20 lg:size-[100px]" />
        <Icon
          name="Cobalt-Company-Name"
          class="w-auto h-14 lg:h-16 mt-1 text-cobalt-50"
        />
        <span class="sr-only" aria-label="Website company name"
          >Cobalt Web Technologies</span
        >
      </a>
    </div>
    <!-- Container for buttons on Theme Toggle, and Mobile menu -->
    <div
      class="col-span-2 col-end-7 ms-auto flex items-center gap-x-2 py-1 lg:order-3 lg:col-span-1 lg:col-end-17"
    >
      <!-- Theme Toggle for dark/light mode -->
      <Button
        type="button"
        size="icon"
        aria-label="Toggle Theme"
        class="bg-cobalt-500 dark:bg-cobalt-600 size-10 items-center justify-center rounded-full hover:bg-cyan-600 lg:size-12 dark:hover:bg-orange-700"
        data-theme-toggle
      >
        <Icon name="Moon" class="size-6 lg:size-8 dark:hidden" />
        <Icon name="Sun" class="hidden size-6 lg:size-8 dark:block" />
      </Button>

      <!-- Mobile Menu Toggle Button -->
      <div class="lg:hidden">
        <Button
          type="button"
          size="icon"
          class="hs-collapse-toggle bg-cobalt-500 dark:bg-cobalt-600 flex size-10 items-center justify-center rounded-full text-sm font-bold text-slate-100 transition duration-300 disabled:pointer-events-none disabled:opacity-50 dark:text-slate-100 dark:focus:outline-none"
          id="hs-navbar-mobile-collapse"
          aria-expanded="false"
          aria-controls="hs-navbar-mobile"
          aria-label="Toggle navigation"
          data-hs-collapse="#hs-navbar-mobile"
        >
          <!-- Menu Icon -->
          <Icon
            name="MobileMenu"
            class="hs-collapse-open:hidden size-6 shrink-0"
          />
          <!-- Close (X) Icon -->
          <Icon
            name="CloseNoFill"
            class="hs-collapse-open:block hidden size-6 shrink-0"
          />
          <span class="sr-only">Toggle navigation</span>
        </Button>
      </div>
    </div>

    <!-- Menu items with collapsible mobile menu (position changes based on breakpoint grid order) -->
    <div
      id="hs-navbar-mobile"
      class="hs-collapse col-span-full hidden overflow-hidden p-5 transition-all duration-300 lg:order-2 lg:col-span-7 lg:col-end-16 lg:block lg:p-0"
      aria-labelledby="hs-navbar-mobile-collapse"
    >
      <ul
        class="flex flex-col gap-6 lg:flex-row lg:items-center lg:justify-end lg:gap-5 xl:gap-8"
      >
        {
          menuItems.navbarItems.map(({ name, url }) => {
            const isActive = url === currentPath;
            return (
              <li>
                <a
                  href={url}
                  aria-current={isActive ? "page" : undefined}
                  data-astro-prefetch
                  class="text-base font-bold text-nowrap text-slate-200 transition-colors duration-300 outline-none hover:text-orange-400 focus-visible:ring aria-[current=page]:text-cyan-400 aria-[current=page]:hover:text-cyan-400 md:text-sm xl:text-lg dark:focus:outline-none"
                >
                  {name}
                </a>
              </li>
            );
          })
        }
      </ul>
    </div>
  </nav>
</header>

<!-- Theme Appearance script to manage light/dark modes -->
<script>
  function initThemeToggle() {
    const toggleButtons = document.querySelectorAll("[data-theme-toggle]");

    toggleButtons.forEach((button) => {
      button.addEventListener("click", handleThemeToggle);
    });
  }

  function handleThemeToggle() {
    // Get current theme from DOM (source of truth)
    const isDark = document.documentElement.classList.contains("dark");
    const newTheme = isDark ? "light" : "dark";

    // Update localStorage
    localStorage.setItem("theme", newTheme);

    // Update DOM
    document.documentElement.classList.toggle("dark", newTheme === "dark");
  }

  // Initialize on first page load
  initThemeToggle();

  // Re-initialize on View Transitions
  document.addEventListener("astro:page-load", initThemeToggle);
</script>
