---
import AuthBtn from "../../ui/buttons/AuthBtn.astro";
import ContactIconBlock from "../../ui/blocks/ContactIconBlock.astro";
import SupportRadio from "../../ui/forms/input/SupportRadio.astro";
import TextInput from "../../ui/forms/input/TextInput.astro";
import EmailContactInput from "../../ui/forms/input/EmailContactInput.astro";
import PhoneInput from "../../ui/forms/input/PhoneInput.astro";
import TextAreaInput from "../../ui/forms/input/TextAreaInput.astro";
import Icon from "../../ui/icons/Icon.astro";
import { z } from "zod";

const title: string = "Support Request";
const subTitle: string =
  "If you have any technical or billing support issue or question, please fill out the form below. You may also contact us via live chat, phone, or email as well. We will respond within our normal operating business hours. If you have an urgent issue, please give us a call at the support phone number below.";
const formTitle: string = "Fill the form below";
const supportType: string = "Please select the support type you require.";

// Validate form inputs
const formSchema = z.object({
  supporttype: z.enum(["technical-support", "billing-support"], {
    required_error: "Please select a support type",
  }),
  firstname: z.string().min(1, "First name is required"),
  lastname: z.string().min(1, "Last name is required"),
  email: z.string().email("Invalid email address"),
  phone: z.string().optional(),
  message: z.string().min(1, "Please give additional info"),
  "cf-turnstile-response": z
    .string()
    .min(1, "CAPTCHA verification is required"),
});

const turnstileSiteKey = import.meta.env.TURNSTILE_PUBLIC_KEY;

let errorMessage: string | null = null;
let formData: z.infer<typeof formSchema> | null = null;

// Process form submission on server
if (Astro.request.method === "POST") {
  try {
    console.log("Form submitted");
    const data = await Astro.request.formData();
    const result = formSchema.safeParse(Object.fromEntries(data));

    if (!result.success) {
      console.log("Form validation failed", result.error.errors);
      errorMessage = "Please fill out all required fields correctly.";
    } else {
      console.log("Form validation successful", result.data);
      formData = result.data;
      const { "cf-turnstile-response": turnstileResponse, ...formFields } =
        formData;

      // Verify the Turnstile token
      const verificationResponse = await fetch(
        "https://challenges.cloudflare.com/turnstile/v0/siteverify",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            secret: import.meta.env.TURNSTILE_SECRET_KEY,
            response: turnstileResponse,
          }),
        },
      );

      const verificationResult = await verificationResponse.json();

      if (!verificationResult.success) {
        console.log("Turnstile verification failed");
        errorMessage = "CAPTCHA verification failed. Please try again.";
      } else {
        console.log("Turnstile verification successful, calling API route");
        // Proceed with form submission
        const apiResponse = await fetch(
          `${Astro.url.origin}/api/sendEmailSupport`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formFields),
          },
        );

        console.log("API route response status:", apiResponse.status);

        if (!apiResponse.ok) {
          const errorData = await apiResponse.json();
          throw new Error(
            errorData.error || `HTTP error! status: ${apiResponse.status}`,
          );
        } else {
          console.log("Email sent successfully");
        }
        // Redirect to the confirmation page
        return Astro.redirect("/support/submission-received/", 302);
      }
    }
  } catch (e) {
    console.error(`Error: ${e instanceof Error ? e.message : String(e)}`);
    errorMessage = "An unexpected error occurred. Please try again.";
  }
}
---

<!-- Support Form -->
<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
  <div class="mx-auto max-w-2xl lg:max-w-5xl">
    <div class="text-center">
      <h1
        class="text-balance text-2xl font-bold tracking-tight text-slate-800 dark:text-slate-200 md:text-4xl md:leading-tight"
      >
        {title}
      </h1>
      <p class="mt-1 text-pretty text-slate-600 dark:text-slate-400">
        {subTitle}
      </p>
      <p class="mt-3 text-center text-slate-600 dark:text-slate-400">
        If you have a general question or are a new customer needing
        information, please use the <a
          href="/contact/"
          class="text-cyan-500 hover:text-orange-600 dark:text-cyan-400 dark:hover:text-orange-400"
          >Contact Form</a
        >.
      </p>
    </div>

    <div class="mt-12 grid items-center gap-6 lg:grid-cols-2 lg:gap-16">
      <div class="flex flex-col rounded-xl p-4 sm:p-6 lg:p-8">
        <h2 class="mb-8 text-xl font-bold text-slate-700 dark:text-slate-300">
          {formTitle}
        </h2>

        <form id="support-form" method="POST">
          <div class="grid gap-4">
            <p class="text-slate-700 dark:text-slate-300">
              {supportType}
            </p>
            <div>
              <SupportRadio
                id="technical-support"
                label="Technical Support"
                inputName="supporttype"
              />
              <SupportRadio
                id="billing-support"
                label="Billing Support"
                inputName="supporttype"
              />
            </div>
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <TextInput
                id="firstname"
                label="First Name"
                inputName="firstname"
              />
              <TextInput id="lastname" label="Last Name" inputName="lastname" />
            </div>
            <EmailContactInput
              id="email"
              label="Email Address"
              inputName="email"
            />
            <PhoneInput id="phone" label="Phone Number" inputName="phone" />
            <TextAreaInput
              id="message"
              label="Please describe your issue here"
              name="message"
            />
          </div>
          <!-- Add Cloudflare Turnstile widget -->
          <div class="cf-turnstile mt-4" data-sitekey={turnstileSiteKey}></div>
          <p class="text-xs text-slate-600 dark:text-slate-400">
            We're just checking that you're a real human filling out this form.
            <br />Bad bots stay away!
          </p>
          <div
            id="error-message"
            class="my-6 hidden animate-bounce rounded-lg border-4 border-orange-400 bg-orange-700 p-3 text-center font-bold text-white"
          >
            {errorMessage}
          </div>
          <div class="mt-4 grid">
            <AuthBtn title="Send Support Request" iconName="messageSend" />
          </div>
        </form>
      </div>

      <!--ContactIconBlocks are used to display different methods of contacting, including visiting office, email, browsing knowledgebase, and FAQ.-->
      <div
        class="divide-y divide-slate-300 text-slate-600 dark:divide-slate-700 dark:text-slate-50"
      >
        <ContactIconBlock
          heading="Hours of Operation"
          content="Monday - Friday, 9AM - 5PM (US Central)"
          isLinkVisible={false}
          ><Icon name="clock" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Live Chat"
          content="Contact us via live chat during our normal business hours."
          isLinkVisible={true}
          linkTitle="Start a chat session"
          linkURL="https://salesiq.zoho.com/signaturesupport.ls?widgetcode=b02c0667d93a35346839e5ab730f507af85d02062470316501c1c4d80b9136f1eae322a2a89cfbc9b10746de3549cb8f"
          isArrowVisible={true}
          ><Icon name="chatBubble" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Call Us"
          content="Contact us via phone during our normal business hours."
          isLinkVisible={true}
          linkTitle="+1-512-297-7600"
          linkURL="tel:+15122977600"
          isArrowVisible={true}
          ><Icon name="phone" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Email Us"
          content="Send us an email."
          isLinkVisible={true}
          linkTitle="support@cobaltweb.tech"
          linkURL="mailto:support@cobaltweb.tech"
          isArrowVisible={true}
          ><Icon name="envelopeOpen" />
        </ContactIconBlock>
      </div>
    </div>
  </div>
</section>
<!-- Process form submission on client side -->
<script>
  document.addEventListener("astro:page-load", () => {
    const form = document.getElementById("support-form") as HTMLFormElement;
    const errorMessageContainer = document.getElementById(
      "error-message",
    ) as HTMLDivElement;

    const displayError = (message: string) => {
      if (errorMessageContainer) {
        errorMessageContainer.textContent = message;
        errorMessageContainer.classList.remove("hidden");
        errorMessageContainer.classList.add("block");
      }
      console.log("Error displayed:", message);
    };

    const isValidEmail = (email: string) => {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    };

    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        const emailInput = form.querySelector(
          'input[name="email"]',
        ) as HTMLInputElement;
        const email = emailInput ? emailInput.value : "";

        // Client-side email validation
        if (!isValidEmail(email)) {
          displayError("Please enter a valid email address.");
          return;
        }

        // Check if Turnstile is ready
        const turnstileToken = formData.get("cf-turnstile-response");
        if (!turnstileToken) {
          displayError("Please complete verification above.");
          return; // Stop submission
        }

        try {
          const response = await fetch("/api/sendEmailSupport", {
            method: "POST",
            body: JSON.stringify(Object.fromEntries(formData)),
            headers: {
              "Content-Type": "application/json",
            },
          });

          const contentType = response.headers.get("content-type");

          if (contentType && contentType.includes("application/json")) {
            const result = await response.json();

            if (result.success) {
              console.log("Form submission successful. Redirecting...");
              window.location.href = result.redirectUrl; // Redirect on success
            } else {
              displayError(result.error || "An error occurred");
            }
          } else {
            displayError("Server responded with an unexpected content type.");
          }
        } catch (error) {
          console.error("Error:", error);
          displayError(
            error instanceof Error
              ? error.message
              : "An unexpected error occurred. Please try again later.",
          );
        }
      });
    }
  });
</script>
