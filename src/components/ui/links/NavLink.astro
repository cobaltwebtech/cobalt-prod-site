---
// Destructure the properties from Astro.props
const { url, name } = Astro.props;

// Define TypeScript interface for the properties
interface Props {
  url: string;
  name: string;
}
---

<!--
Re-usable link component for navigation bar. Highlights the active link
by comparing the current URL with the href of each link.
We assign an ID matching the URL for easy reference in our script.
If URL is '/' (home page), assign ID as 'home' 
-->
<a
  id={url === "/" ? "home" : url.replace("/", "")}
  href={url}
  data-astro-prefetch
  class="text-nowrap rounded-lg text-base font-bold text-slate-200 outline-none ring-slate-500 hover:text-orange-400 focus-visible:ring dark:ring-slate-200 dark:focus:outline-none md:py-3 md:text-sm xl:text-lg 2xl:text-base"
>
  {name}
</a>

<script>
  document.addEventListener("astro:page-load", () => {
    const setActiveNavLink = () => {
      let url = window.location.pathname;
      let navId = url === "/" ? "home" : url.replace("/", "");
      let nav = document.getElementById(navId);

      if (nav) {
        nav.classList.remove("text-slate-200");
        nav.classList.add("text-cyan-400", "hover:text-cyan-400");
        nav.setAttribute("aria-current", "page");
      }
    };

    // Run the function immediately after page load
    setActiveNavLink();

    // Listen for view transitions and update the active link accordingly
    document.addEventListener("astro:after-view-transition", setActiveNavLink);
  });
</script>
